// Code generated by MockGen. DO NOT EDIT.
// Source: ./server_nobl.go

// Package mock is a generated GoMock package.
package gserver

import (
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockServerNobl is a mock of ServerNobl interface
type MockServerNobl struct {
	ctrl     *gomock.Controller
	recorder *MockServerNoblMockRecorder
}

// MockServerNoblMockRecorder is the mock recorder for MockServerNobl
type MockServerNoblMockRecorder struct {
	mock *MockServerNobl
}

// NewMockServerNobl creates a new mock instance
func NewMockServerNobl(ctrl *gomock.Controller) *MockServerNobl {
	mock := &MockServerNobl{ctrl: ctrl}
	mock.recorder = &MockServerNoblMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServerNobl) EXPECT() *MockServerNoblMockRecorder {
	return m.recorder
}

// Server mocks base method
func (m *MockServerNobl) Server() *grpc.Server {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Server")
	ret0, _ := ret[0].(*grpc.Server)
	return ret0
}

// Server indicates an expected call of Server
func (mr *MockServerNoblMockRecorder) Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Server", reflect.TypeOf((*MockServerNobl)(nil).Server))
}

// ServerItem mocks base method
//func (m *MockServerNobl) ServerItem() ServerItem {
//	m.ctrl.T.Helper()
//	ret := m.ctrl.Call(m, "ServerItem")
//	ret0, _ := ret[0].(ServerItem)
//	return ret0
//}

// ServerItem indicates an expected call of ServerItem
//func (mr *MockServerNoblMockRecorder) ServerItem() *gomock.Call {
//	mr.mock.ctrl.T.Helper()
//	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerItem", reflect.TypeOf((*MockServerNobl)(nil).ServerItem))
//}
